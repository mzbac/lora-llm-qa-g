{
  "questions": [
    {
      "question": "What is the purpose of the UnwrapPromise<T> type in TypeScript?",
      "answer": "The UnwrapPromise<T> type is used to extract the resolved type from a Promise type. It takes a Promise type as its generic parameter and returns the resolved type of that Promise."
    },
    {
      "question": "How does the UnwrapPromise<T> type work?",
      "answer": "The UnwrapPromise<T> type uses conditional types to check if the provided type extends Promise<any>. If it does, it extracts the resolved type using the infer keyword and returns it. If it doesn't, it returns never."
    },
    {
      "question": "Can the UnwrapPromise<T> type be used with non-Promise types?",
      "answer": "No, the UnwrapPromise<T> type can only be used with Promise types. If it is used with a non-Promise type, it will return never."
    },
    {
      "question": "What is a conditional type in TypeScript?",
      "answer": "A conditional type in TypeScript is a type that depends on a condition. It uses the extends keyword to check if a type satisfies a certain condition and returns a type based on that condition."
    },
    {
      "question": "What is the infer keyword in TypeScript?",
      "answer": "The infer keyword in TypeScript is used in conditional types to infer the type of a generic parameter based on a condition. It allows TypeScript to extract the type of a variable or parameter and use it in a type definition."
    }
  ]
}